.TH HOSTS_OPTIONS 5
.SH NAME
hosts_options \- host access control language extensions
.SH DESCRIPTION
This document describes optional extensions to the language described
in the hosts_access(5) document. The extensions are enabled at program
build time by editing the Makefile.
.PP
The extensible language uses the following format:
.sp
.ti +3
daemon_list : client_list : option : option ...
.PP
The first two fields are described in the hosts_access(5) manual page.
The remainder of the rules is a list of zero or more options.  Any ":"
characters within options should be protected with a backslash.
.PP
An option is of the form "keyword" or "keyword = value". Options are
processed in the specified order. With some options, the value is
subjected to %<character> substitutions. 
.SH OPTIONS
.IP "severity = mail.info"
Change the severity level at which the event will be logged. Facility
names (such as mail) are optional, and are not supported on systems
with older syslog implementations. The severity option can be used
to emphasize or to completely ignore specific events.
.IP "allow (deny)"
Grant (deny) service, even when the matched rule was found in the
\fIhosts.deny (hosts.allow)\fR file. These options must appear at the
end of a rule.
.PP
With the \fIallow\fR and \fIdeny\fR keywords it is possible to keep all
access control rules within a single file, for example in the
\fIhosts.allow\fR file. For example,
.sp
.ne 2
.ti +3
ALL: .friendly.domain: allow
.ti +3
ALL: ALL: deny
.sp
permits access from specific hosts only. On the other hand,
.sp
.ne 2
.ti +3
ALL: .trouble.makers: deny
.ti +3
ALL: ALL: allow
.sp
permits access from all hosts except a few trouble makers.
.IP "twist = shell_command"
Replace the current process by an instance of the specified shell
command, after performing the %<character> expansions described in the
hosts_access(5) manual page.  Stdin, stdout and stderr are connected to
the remote client process. This option must appear at the end of a rule.
.sp
Examples:
.sp
.nf
.ti +3
in.ftpd : ... : twist = /bin/echo 421 Some bounce message
.fi
.sp
sends a customized bounce message to the remote client instead of
running the real ftp daemon.
.sp
.nf
.ti +3
in.telnetd : ... : twist = PATH=/some/other; exec in.telnetd
.fi
.sp
would run /some/other/in.telnetd without polluting its command-line
array or its process environment.
.sp
Warning:  in case of UDP services, do not twist into commands that use
the standard I/O or the read(2)/write(2) routines to communicate with
the client process; UDP requires other I/O primitives.
.IP "spawn = shell_command"
Execute the shell command in a child process, after performing the
%<character> expansions described in the hosts_access(5) manual page.
The command is executed with stdin, stdout and stderr connected to the
null device, so that it won\'t mess up the conversation with the remote
host. Example:
.sp
.nf
.ti +3
spawn = (/some/where/safe_finger -l @%h | /usr/ucb/mail root) &
.fi
.sp
executes, in a background child process, the shell command "safe_finger
-l @%h | mail root" after replacing %h by the name or address of the
remote host.
.sp
The example uses the "safe_finger" command instead of the regular
"finger" command, to limit possible damage from data sent by the finger
server. The "safe_finger" command is part of the daemon wrapper
package; it is a wrapper around the regular finger command that filters
the data sent by the remote host.
.IP "umask = 022"
Like the umask command that is built into the shell. An umask of 022
prevents the creation of files with group and world write permission.
The umask argument should be an octal number.
.IP "keepalive"
Causes the server to periodically send a message to the client.  The
connection is considered broken when the client does not respond. The
keepalive option can be useful when users turn off their machine while
it is still connected to a server.  The keepalive option is not useful
for datagram (UDP) services.
.IP "linger = number_of_seconds"
Specifies how long the kernel will try to deliver not-yet delivered
data after the server process closes a connection. 
.IP "nice = niceval"
.IP "nice (no argument)"
Change the nice value of the process (default 10).  Specify a positive
value to spend more CPU resources on other processes. 
.IP "user = nobody"
Assume the privileges of the "nobody" account. This is useful with
inetd implementations that run all services with root privilege. It is
good practice to run services such as "finger" at a reduced privilege
level.
.IP "group = tty"
Assume the privileges of the "tty" group. This is useful mostly in
combination with the "user" option.  In order to switch both user and
group ids, switch group id before switching user id.
.IP "setenv = name value"
Place a (name, value) pair into the process environment. The value is
subjected to %<character> expansions and may contain whitespace (but
leading and trailing blanks are stripped off).
.sp
Warning: many network daemons reset their environment before spawning a
login or shell process.
.IP "rfc931 = timeout_in_seconds"
.IP "rfc931 (no argument)"
Look up the remote user name with the RFC 931 (IDENT, etc.) protocol.
This option is silently ignored in case of services based on transports
other than TCP.  It requires that the client system runs an RFC 931
(IDENT, etc.) -compliant daemon, and may cause noticeable delays with
connections from non-UNIX hosts.  The timeout period is optional. If no
timeout is specified a default value is taken.
.SH DIAGNOSTICS
When a syntax error is found in an access control rule, the error
is reported to the syslog daemon; further options will be ignored,
and service is denied.
.SH SEE ALSO
hosts_access(5), the default access control language
.SH AUTHOR
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513, 5600 MB Eindhoven, The Netherlands
\" @(#) hosts_options.5 1.9 94/03/23 16:52:32
